################################################################
#
# Data Analysis for MAchine learning data
#

# Clear all previous variables
rm(list=ls())


GetData <- function(Instrument="",DataPath="C:\\Data",DebugThis=TRUE)
{
  
  library(fst)
  
  # Lets store the Instrument with todays date
  Today = Sys.Date()
  destfile=paste(DataPath,"\\",Instrument,"-",Today,".CSV",sep="")
  
  
  # Do we already have the data
  if (file.exists(destfile)) {
    
    if (DebugThis==TRUE) {print(paste("Found file already exists so loading now ...",destfile))}
    
    InstrumentData <- read.fst(destfile,as.data.table = TRUE)
    
    return(InstrumentData)
    
  } else {
    
    if (DebugThis==TRUE) {print(paste("Loading from Stooq ..."))}
    
    InstrumentData <- read.csv(paste("https://stooq.com/q/d/l/?s=",Instrument,"&i=d",sep=""))
    
    # Create rownames
    rownames(InstrumentData) <- InstrumentData$Date
    InstrumentData$Date <- NULL
    
    # Convert the data format
    InstrumentData <- as.data.frame(InstrumentData)
    InstrumentData$Date <- as.Date(rownames(InstrumentData),"%Y-%m-%d")
    
    # Write file to FST format and then read back  
    if (DebugThis==TRUE) {print(paste("Found data now writing file for next time ...",destfile))}
    write.fst(InstrumentData,destfile)
    
    if (DebugThis==TRUE) {print(paste("Reading file back in now ...",destfile))}
    InstrumentData <- read.fst(destfile,as.data.table = TRUE)
    
    return(InstrumentData)
    
  }
  
}

###########################################################
#
# Machine Learning Framework
#
# Data Analysis Stub
#
###########################################################
#
# Designed to ensure that data is correctly loaded 
#
# By B. G. Bland (Fidessa RAID Team)

library(TTR)
library(ggplot2)

# Edit these variables to control the columns to fit
ProjectTitle <- "STOOQ Data ML"

ColumnsToSelectForTraining <- c("WPR","FastK","DNTopProx","BuySellHold") # Reduce data set from original
DisplayColumnNames <- ColumnsToSelectForTraining    # Rename the columns

# Prediction variable
PredictionVariable <- "BuySellHold"                                          # y^ the prediction variable
VariableNames <- setdiff(DisplayColumnNames,PredictionVariable)

# Data Analysis Options
PrintExamplesinAnalysis <- TRUE
DrawChartsinAnalysis <- TRUE

#####################################################################################
#
# Functions - Edit the DataLoadandFormat Function to ingest the data
#
#####################################################################################

# Function to load a check data 
DataLoadAndFormat <- function(Backtest=TRUE,Debug=TRUE,
                              TrainingStartDate = "",          # Start of training period
                              TrainingEndDate = "",            # End of training period
                              TestStartDate="",                # Start of testing period
                              TestEndDate="")                  # End of testing period)
{
  if (Debug==TRUE) {print("Loading data")}
  
  
  # Use example MTCARS data set
  DataFrame <- GetData("AAPL.US","D:\\DATA",DebugThis=TRUE)
  
  # Build New Data Frame for ML
  DataFrame <- data.frame(Date=DataFrame$Date,
                          Open_Price=DataFrame$Open,
                          High_Price=DataFrame$High,
                          Low_Price=DataFrame$Low,
                          Close_Price=DataFrame$Close,
                          Volume=DataFrame$Volume)
  
  # Select only data required
  DataFrame <- subset(DataFrame,Date > as.Date(TrainingStartDate,"%Y%m%d"))
  DataFrame <- subset(DataFrame,Date < as.Date(TestEndDate,"%Y%m%d"))
  
  # Fit the lines now
  
  #Williams %R
  DataFrame$WPR <- WPR(DataFrame$Close_Price, n = 7)
  
  # Stoch
  Stoch <- stoch(DataFrame$Close_Price, 
                 nFastK = 7, 
                 nFastD = 3, 
                 nSlowD = 3, 
                 bounded = TRUE,
                 smooth = 1)
  
  DataFrame$FastK <- Stoch[,1]
  DataFrame$FastK <- ifelse(DataFrame$FastK < 0,0,DataFrame$FastK)
  
  # DonchianChannel
  DN <- DonchianChannel( DataFrame[,c("High_Price","Low_Price")],n=21 )
  DataFrame$DNHigh <- DN[,1]
  DataFrame$DNMid <- DN[,2]
  DataFrame$DNLow <- DN[,3]
  
  DataFrame$DN_Percent_Range <- (DataFrame$DNHigh - DataFrame$DNLow)
  DataFrame$DN_Top_Prox <- (DataFrame$DNHigh - DataFrame$Close_Price) / DataFrame$DN_Percent_Range
  
  #Create next Close Price
  DataFrame$NextClose <- c(tail(DataFrame$Close_Price,nrow(DataFrame)-1),0)
  DataFrame$PriceReturn <- DataFrame$NextClose - DataFrame$Close_Price
  
  DataFrame$NextClosePlusOne <- c(tail(DataFrame$NextClose,nrow(DataFrame)-1),0)
  DataFrame$PriceReturnPlusOne <- DataFrame$NextClosePlusOne - DataFrame$Close_Price
  
  
  #Now make new data frame
  DataFrame <- data.frame(Date= DataFrame$Date,
                          Close_Price = DataFrame$Close_Price,
                          WPR = DataFrame$WPR,
                          FastK = DataFrame$FastK,
                          DNTopProx = DataFrame$DN_Top_Prox,
                          PriceReturn = DataFrame$PriceReturnPlusOne)
  
  #Set the last price return to zero
  DataFrame$PriceReturn[nrow(DataFrame)] = 0
  DataFrame$PriceReturn[nrow(DataFrame)-1] = 0
  
  # Calculate best buying and selling times
  SlopeChangePeriod <- 10 # Days
  NoRows <- nrow(DataFrame)
  WindowSize1 <- SlopeChangePeriod * 2   # Should be twice the period
  SequenceSteps1 <- round(SlopeChangePeriod/8,0)  # Smaller gives more data points
  
  Frames <- seq(1,NoRows - WindowSize1,by=SequenceSteps1)
  
  # Define new columns
  DataFrame$MaxInWindow <- 0
  DataFrame$MinInWindow <- 0
  
  # Loop around for every frame to pick max and min values
  for (Frame in Frames)
  {
    StartOfFrame <- Frame
    EndOfFrame <- Frame + WindowSize1
    
    Window <- DataFrame[StartOfFrame:EndOfFrame-1,] # Cut the data frame into a small window
    
    MaxInWindow <- which.max(Window$Close_Price)  # Which.Max gives the position of the highest value
    MinInWindow <- which.min(Window$Close_Price)
    
    # Mark the highest and lowest values with a 1
    if (MaxInWindow >1)
    {
      DataFrame[MaxInWindow + StartOfFrame - 2,]$MaxInWindow <- 1
    } else {
      DataFrame[MaxInWindow + StartOfFrame - 1,]$MaxInWindow <- 1
    }
    if (MinInWindow > 1)
    {
      DataFrame[MinInWindow + StartOfFrame - 2,]$MinInWindow <- 1
    } else {
      DataFrame[MinInWindow + StartOfFrame - 1,]$MinInWindow <- 1
    }
  }

  DataFrame$BuySellHold <- ifelse(DataFrame$MaxInWindow == 1,-1,
                                 ifelse(DataFrame$MinInWindow == 1,1,0))
  
  return(DataFrame)
  
}

###########################################################################################
#
# Do not modify beneath here ................
#
###########################################################################################

## Quick summary of data we are using to compute the column type and number of levels
DataAnalysis <- function(DataFrame,PredictionVariable="",Title = "",PrintExamples = TRUE,DrawCharts = TRUE)
{
  
  print("Data Analysis of DataFrame")
  print("")
  
  if (is.data.frame(DataFrame) == TRUE)
  {
    
    Cols <- colnames(DataFrame)
    
    for (col in Cols)
    {
      
      # Select the column number
      ColNo <- which(Cols == col)
      print(paste("Column",col))
      print(paste("    No unique values =",length(unique(DataFrame[,ColNo]))))
      print(paste("    Class",class(DataFrame[,ColNo]),"with",length(levels(DataFrame[,ColNo])),"levels"))
      
      # Print top five unique items
      if (PrintExamples == TRUE)
      {
        # Now print the top 5 unique values in the column
        for (i in head(unique(DataFrame[,ColNo]),5)){print(paste("        ",col,"=",i))}
      }
      # Now print summary if not a factor
      if (class(DataFrame[,ColNo])!= "factor") {
        print(paste("    Min",min(DataFrame[,ColNo]),
                    "Median",median(DataFrame[,ColNo]),
                    "Mean",mean(DataFrame[,ColNo]),
                    "Max",max(DataFrame[,ColNo])))
      }
      
      print(" ")
      
      if (DrawCharts == TRUE)
      {
        if (col != PredictionVariable)
        {
          # Now plot the results
          Prediction <- which(Cols == PredictionVariable)
          PredictionCol <- DataFrame[,Prediction]
          ActualCol <- DataFrame[,ColNo]
          PlotDF <- data.frame(Prediction = PredictionCol, Actual = ActualCol)
          
          ResultsPlot <- ggplot(PlotDF,aes(x=Actual,y=Prediction)) +
            geom_point(aes(x=Actual,y=Prediction),
                       colour="Blue",
                       fill="DarkBlue",
                       size=0.5) +
            geom_smooth(method="lm") +
            ylab(paste(PredictionVariable,"- Predict Column")) +
            xlab(paste(col,"- Example Column")) +
            theme(plot.title = element_text(size = 12),
                  axis.title.x = element_text(size = 10),
                  axis.title.y = element_text(size = 10),
                  text = element_text(size = 8)) +
            ggtitle(paste(Title,"-",PredictionVariable,"versus",col))
          print(ResultsPlot)
        }
      }
    }
  }
}

# Function to pre-process the data
PreProcessWithoutSplit <- function(DataFrame,Columns,ColumnNames,Backtest=TRUE,Debug=TRUE)
{
  if (Debug==TRUE) {print("PreProcessing data")}
  
  # Generic code
  DataFrame <- DataFrame[,Columns]
  colnames(DataFrame) <- ColumnNames
  
  return(DataFrame)
}


# Get data
DataFrame <- DataLoadAndFormat(Backtest=FALSE,Debug=TRUE,
                               TrainingStartDate = "20110101",TrainingEndDate = "20160601",
                               TestStartDate="20160602",TestEndDate="20190701")

# Preprocess function
DataFrame <- PreProcessWithoutSplit(DataFrame,
                                    ColumnsToSelectForTraining,
                                    DisplayColumnNames,
                                    Backtest=TRUE,
                                    Debug=TRUE)

# Check data formats after pre-processing
DataAnalysis(DataFrame,
             PredictionVariable,
             ProjectTitle,
             PrintExamples = PrintExamplesinAnalysis,
             DrawCharts = DrawChartsinAnalysis)

# End of script

